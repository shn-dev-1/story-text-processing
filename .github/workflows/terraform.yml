name: 'Terraform'

on:
  push:
    branches: [ main ]

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Install Dependencies
      run: |
        npm ci
      
    - name: Build TypeScript
      run: |
        npm run build:story-text-processing
      
    - name: Package Lambda Function
      run: |
        echo "Packaging story-text-processing Lambda function with dependencies..."
        npm run package:story-text-processing
        echo "story-text-processing Lambda function packaged successfully"
        ls -la story_text_processing_lambda_function.zip
        
    - name: Terraform Init
      run: terraform init
      
    - name: Terraform Format Check
      run: terraform fmt -check
      
    - name: Terraform Validate
      run: terraform validate
      
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -detailed-exitcode
      continue-on-error: true
      
    - name: Check Plan Status
      id: plan_status
      run: |
        if [ ${{ steps.plan.outputs.exit_code }} -eq 0 ]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "PLAN_STATUS=success" >> $GITHUB_ENV
        elif [ ${{ steps.plan.outputs.exit_code }} -eq 1 ]; then
          echo "status=error" >> $GITHUB_OUTPUT
          echo "PLAN_STATUS=error" >> $GITHUB_ENV
        else
          echo "status=changes" >> $GITHUB_OUTPUT
          echo "PLAN_STATUS=changes" >> $GITHUB_ENV
        fi
        
    - name: Plan Failed - Skip Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.plan_status.outputs.status == 'error'
      run: |
        echo "❌ Terraform plan failed. Skipping apply step."
        echo "Please fix the plan errors before merging to main."
        exit 1
        
    - name: No Changes - Skip Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.plan_status.outputs.status == 'success'
      run: |
        echo "✅ No infrastructure changes detected. Skipping apply step."
        echo "Infrastructure is already up-to-date."
      
    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Plan 📝
          \`\`\`\n
          ${process.env.PLAN || 'No changes. Infrastructure is up-to-date.'}
          \`\`\`
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
          
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.plan_status.outputs.status == 'changes'
      run: terraform apply -auto-approve -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}"
      
    - name: Comment Apply Result
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.plan_status.outputs.status == 'changes'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const output = `#### Terraform Apply 🚀
            
            Infrastructure has been successfully deployed to production!
            
            **Deployed Resources:**
            - Lambda Function: \`story-text-processing-lambda\`
            - IAM Role: \`story-text-processing-lambda-role\`
            - SQS Event Source Mapping
            - DynamoDB CRUD Permissions (story-metadata, story-video-tasks)
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            // Try to create a commit comment
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: output
            });
            
            console.log('Successfully created commit comment');
          } catch (error) {
            console.log('Could not create commit comment:', error.message);
            console.log('This is not critical - the deployment was successful');
          }
          
    - name: Create Workflow Summary
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.plan_status.outputs.status == 'changes'
      run: |
        echo "## 🚀 Terraform Apply Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Infrastructure has been successfully deployed to production!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Deployed Resources:**" >> $GITHUB_STEP_SUMMARY
        echo "- Lambda Function: \`story-text-processing-lambda\`" >> $GITHUB_STEP_SUMMARY
        echo "- IAM Role: \`story-text-processing-lambda-role\`" >> $GITHUB_STEP_SUMMARY
        echo "- SQS Event Source Mapping" >> $GITHUB_STEP_SUMMARY
        echo "- DynamoDB CRUD Permissions (story-metadata, story-video-tasks)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Deployed by**: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "**Action**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
